
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 28 19:14:24 CST 2018
//----------------------------------------------------

import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 28 19:14:24 CST 2018
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\051\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\015\002\000\002\003\006\000\002\016\002" +
    "\000\002\003\010\000\002\017\002\000\002\003\006\000" +
    "\002\020\002\000\002\003\010\000\002\004\005\000\002" +
    "\004\005\000\002\004\003\000\002\005\005\000\002\005" +
    "\005\000\002\005\003\000\002\007\005\000\002\007\003" +
    "\000\002\010\006\000\002\010\006\000\002\010\006\000" +
    "\002\010\006\000\002\010\006\000\002\006\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\011\010\000\002\011\006" +
    "\000\002\014\005\000\002\014\005\000\002\014\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\012\007\000\002\012\005\000\002\012\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\020\005\021\004\001\002\000\004\034" +
    "\131\001\002\000\004\034\012\001\002\000\010\002\uffff" +
    "\020\uffff\021\uffff\001\002\000\010\002\011\020\005\021" +
    "\004\001\002\000\010\002\001\020\001\021\001\001\002" +
    "\000\004\002\000\001\002\000\006\004\ufffe\013\013\001" +
    "\002\000\030\011\035\023\016\024\030\025\020\026\023" +
    "\027\026\030\022\031\033\032\024\033\036\034\027\001" +
    "\002\000\004\004\015\001\002\000\010\002\ufffd\020\ufffd" +
    "\021\ufffd\001\002\000\004\011\126\001\002\000\024\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1\012\ufff1\014\047" +
    "\015\ufff1\017\ufff1\001\002\000\004\011\123\001\002\000" +
    "\024\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4\012\uffe4" +
    "\014\uffe4\015\uffe4\017\uffe4\001\002\000\004\011\120\001" +
    "\002\000\004\011\115\001\002\000\024\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\012\uffe8\014\uffe8\015\uffe8\017" +
    "\uffe8\001\002\000\024\004\uffef\005\uffef\006\uffef\007\uffef" +
    "\010\uffef\012\uffef\014\uffef\015\uffef\017\uffef\001\002\000" +
    "\004\011\112\001\002\000\024\004\uffe7\005\uffe7\006\uffe7" +
    "\007\uffe7\010\uffe7\012\uffe7\014\uffe7\015\uffe7\017\uffe7\001" +
    "\002\000\004\011\060\001\002\000\024\004\uffe5\005\uffe5" +
    "\006\uffe5\007\uffe5\010\uffe5\012\uffe5\014\uffe5\015\uffe5\017" +
    "\uffe5\001\002\000\022\004\ufff4\005\ufff4\006\ufff4\007\045" +
    "\010\044\012\ufff4\015\ufff4\017\ufff4\001\002\000\004\011" +
    "\055\001\002\000\010\004\ufffc\005\041\006\042\001\002" +
    "\000\030\011\035\023\016\024\030\025\020\026\023\027" +
    "\026\030\022\031\033\032\024\033\036\034\027\001\002" +
    "\000\024\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\012" +
    "\uffe6\014\uffe6\015\uffe6\017\uffe6\001\002\000\010\005\041" +
    "\006\042\012\040\001\002\000\024\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\012\uffe9\014\uffe9\015\uffe9\017\uffe9" +
    "\001\002\000\030\011\035\023\016\024\030\025\020\026" +
    "\023\027\026\030\022\031\033\032\024\033\036\034\027" +
    "\001\002\000\030\011\035\023\016\024\030\025\020\026" +
    "\023\027\026\030\022\031\033\032\024\033\036\034\027" +
    "\001\002\000\022\004\ufff5\005\ufff5\006\ufff5\007\045\010" +
    "\044\012\ufff5\015\ufff5\017\ufff5\001\002\000\030\011\035" +
    "\023\016\024\030\025\020\026\023\027\026\030\022\031" +
    "\033\032\024\033\036\034\027\001\002\000\030\011\035" +
    "\023\016\024\030\025\020\026\023\027\026\030\022\031" +
    "\033\032\024\033\036\034\027\001\002\000\024\004\ufff3" +
    "\005\ufff3\006\ufff3\007\ufff3\010\ufff3\012\ufff3\014\047\015" +
    "\ufff3\017\ufff3\001\002\000\030\011\035\023\016\024\030" +
    "\025\020\026\023\027\026\030\022\031\033\032\024\033" +
    "\036\034\027\001\002\000\024\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\010\ufff0\012\ufff0\014\ufff0\015\ufff0\017\ufff0\001" +
    "\002\000\024\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2" +
    "\012\ufff2\014\047\015\ufff2\017\ufff2\001\002\000\022\004" +
    "\ufff6\005\ufff6\006\ufff6\007\045\010\044\012\ufff6\015\ufff6" +
    "\017\ufff6\001\002\000\004\004\054\001\002\000\010\002" +
    "\ufffb\020\ufffb\021\ufffb\001\002\000\030\011\035\023\016" +
    "\024\030\025\020\026\023\027\026\030\022\031\033\032" +
    "\024\033\036\034\027\001\002\000\010\005\041\006\042" +
    "\012\057\001\002\000\024\004\uffeb\005\uffeb\006\uffeb\007" +
    "\uffeb\010\uffeb\012\uffeb\014\uffeb\015\uffeb\017\uffeb\001\002" +
    "\000\006\016\065\022\064\001\002\000\010\005\077\006" +
    "\100\017\107\001\002\000\020\004\uffdc\005\uffdc\006\uffdc" +
    "\007\104\010\103\012\uffdc\017\uffdc\001\002\000\014\004" +
    "\uffdf\005\uffdf\006\uffdf\012\uffdf\017\uffdf\001\002\000\004" +
    "\011\074\001\002\000\030\011\035\023\016\024\030\025" +
    "\020\026\023\027\026\030\022\031\033\032\024\033\036" +
    "\034\066\001\002\000\020\005\uffe7\006\uffe7\007\uffe7\010" +
    "\uffe7\014\uffe7\015\073\017\uffe7\001\002\000\010\005\041" +
    "\006\042\017\070\001\002\000\030\011\035\023\016\024" +
    "\030\025\020\026\023\027\026\030\022\031\033\032\024" +
    "\033\036\034\027\001\002\000\010\005\041\006\042\015" +
    "\072\001\002\000\020\004\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\012\uffdb\017\uffdb\001\002\000\020\004\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\012\uffda\017\uffda\001\002" +
    "\000\006\016\065\022\064\001\002\000\010\005\077\006" +
    "\100\012\076\001\002\000\020\004\uffd9\005\uffd9\006\uffd9" +
    "\007\uffd9\010\uffd9\012\uffd9\017\uffd9\001\002\000\006\016" +
    "\065\022\064\001\002\000\006\016\065\022\064\001\002" +
    "\000\014\004\uffe0\005\uffe0\006\uffe0\012\uffe0\017\uffe0\001" +
    "\002\000\014\004\uffe1\005\uffe1\006\uffe1\012\uffe1\017\uffe1" +
    "\001\002\000\030\011\035\023\016\024\030\025\020\026" +
    "\023\027\026\030\022\031\033\032\024\033\036\034\027" +
    "\001\002\000\030\011\035\023\016\024\030\025\020\026" +
    "\023\027\026\030\022\031\033\032\024\033\036\034\027" +
    "\001\002\000\014\004\uffde\005\uffde\006\uffde\012\uffde\017" +
    "\uffde\001\002\000\014\004\uffdd\005\uffdd\006\uffdd\012\uffdd" +
    "\017\uffdd\001\002\000\006\016\065\022\064\001\002\000" +
    "\010\005\077\006\100\012\111\001\002\000\024\004\uffe3" +
    "\005\uffe3\006\uffe3\007\uffe3\010\uffe3\012\uffe3\014\uffe3\015" +
    "\uffe3\017\uffe3\001\002\000\030\011\035\023\016\024\030" +
    "\025\020\026\023\027\026\030\022\031\033\032\024\033" +
    "\036\034\027\001\002\000\010\005\041\006\042\012\114" +
    "\001\002\000\024\004\uffee\005\uffee\006\uffee\007\uffee\010" +
    "\uffee\012\uffee\014\uffee\015\uffee\017\uffee\001\002\000\030" +
    "\011\035\023\016\024\030\025\020\026\023\027\026\030" +
    "\022\031\033\032\024\033\036\034\027\001\002\000\010" +
    "\005\041\006\042\012\117\001\002\000\024\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\010\uffed\012\uffed\014\uffed\015\uffed" +
    "\017\uffed\001\002\000\030\011\035\023\016\024\030\025" +
    "\020\026\023\027\026\030\022\031\033\032\024\033\036" +
    "\034\027\001\002\000\010\005\041\006\042\012\122\001" +
    "\002\000\024\004\uffec\005\uffec\006\uffec\007\uffec\010\uffec" +
    "\012\uffec\014\uffec\015\uffec\017\uffec\001\002\000\030\011" +
    "\035\023\016\024\030\025\020\026\023\027\026\030\022" +
    "\031\033\032\024\033\036\034\027\001\002\000\010\005" +
    "\041\006\042\012\125\001\002\000\024\004\uffea\005\uffea" +
    "\006\uffea\007\uffea\010\uffea\012\uffea\014\uffea\015\uffea\017" +
    "\uffea\001\002\000\006\016\065\022\064\001\002\000\010" +
    "\005\077\006\100\012\130\001\002\000\024\004\uffe2\005" +
    "\uffe2\006\uffe2\007\uffe2\010\uffe2\012\uffe2\014\uffe2\015\uffe2" +
    "\017\uffe2\001\002\000\006\004\ufffa\013\133\001\002\000" +
    "\004\004\137\001\002\000\006\016\065\022\064\001\002" +
    "\000\010\004\ufff8\005\077\006\100\001\002\000\004\004" +
    "\136\001\002\000\010\002\ufff7\020\ufff7\021\ufff7\001\002" +
    "\000\010\002\ufff9\020\ufff9\021\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\135\000\006\002\006\003\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\013\001\001\000\016\004\033\005\031\006\024\007\016" +
    "\010\020\011\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\052\001\001\000\016" +
    "\004\036\005\031\006\024\007\016\010\020\011\030\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\051\006\024\007\016\010\020\011\030\001" +
    "\001\000\014\005\042\006\024\007\016\010\020\011\030" +
    "\001\001\000\002\001\001\000\012\006\024\007\050\010" +
    "\020\011\030\001\001\000\012\006\024\007\045\010\020" +
    "\011\030\001\001\000\002\001\001\000\010\006\047\010" +
    "\020\011\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\004\055\005\031\006\024\007\016\010\020\011\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\061\013\062\014\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\004" +
    "\066\005\031\006\024\007\016\010\020\011\030\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\004\070\005" +
    "\031\006\024\007\016\010\020\011\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\061\013\062\014\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\061\013\101\001\001\000\006\012" +
    "\061\013\100\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\006\105\010\020\011\030\001\001\000\010\006" +
    "\104\010\020\011\030\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\061\013\062\014\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\004\112\005\031" +
    "\006\024\007\016\010\020\011\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\004\115\005\031\006\024" +
    "\007\016\010\020\011\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\120\005\031\006\024\007\016" +
    "\010\020\011\030\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\004\123\005\031\006\024\007\016\010\020" +
    "\011\030\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\012\061\013\062\014\126\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\131\001\001\000\002\001" +
    "\001\000\010\012\061\013\062\014\133\001\001\000\004" +
    "\020\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    
    public void report_error(String message, Object info) {
   
        StringBuilder m = new StringBuilder("Error");
   
         if (info instanceof java_cup.runtime.Symbol) {
            
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
             if (s.left >= 0) {                
                  m.append(" in line "+(s.left+1));   
               	 
               	  if (s.right >= 0)                    
                 	 m.append(", column "+(s.right+1));
            }
        }
   
        m.append(" : "+message);
   
        System.err.println(m);
    }
   
    
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // vector ::= NORM LPAREN vexpr RPAREN 
            {
              Vector RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ve = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Vector( ((Vector)ve).normalize() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // vector ::= LV ID RV 
            {
              Vector RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = (Vector)(Variables.getValue(i));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // vector ::= LV expr COMA expr RV 
            {
              Vector RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Vector(e,e1); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // vfactor ::= vector 
            {
              Vector RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Vector( ((Vector)v) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // vfactor ::= vector DIVIDE term 
            {
              Vector RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Vector( ((Vector)v).divideByScalar(t.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // vfactor ::= vector TIMES term 
            {
              Vector RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector v = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Vector( ((Vector)v).multiplyByScalar(t.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vfactor",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // vexpr ::= vfactor 
            {
              Vector RESULT =null;
		int vfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector vf = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Vector( (Vector)vf ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vexpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // vexpr ::= vexpr MINUS vfactor 
            {
              Vector RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector ve = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector vf = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Vector( ((Vector)ve).substract(vf) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vexpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // vexpr ::= vexpr PLUS vfactor 
            {
              Vector RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector ve = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vfleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vfright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector vf = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Vector( ((Vector)ve).sum(vf) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("vexpr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // sc ::= MAG LPAREN vexpr RPAREN 
            {
              Double RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ve = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double( ((Vector)ve).magnitude() ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sc",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // sc ::= DOT LPAREN vexpr COMA vexpr RPAREN 
            {
              Double RESULT =null;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector ve = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ve1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int ve1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector ve1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double( ((Vector)ve).dot((Vector) ve1) ); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("sc",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // term ::= func 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(f.doubleValue());; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // term ::= sc 
            {
              Double RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double s = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = s;  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // term ::= PI 
            {
              Double RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = Math.PI; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // term ::= ID 
            {
              Double RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = (Double)Variables.getValue(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // term ::= NUMBER 
            {
              Double RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double n = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = n; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // term ::= LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("term",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // func ::= LN LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.log(e.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // func ::= SQRT LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.sqrt(e.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // func ::= TAN LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.tan(e.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // func ::= SIN LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.sin(e.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // func ::= COS LPAREN expr RPAREN 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Double(Math.cos(e.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("func",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // power ::= term 
            {
              Double RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		  RESULT = new Double(t.doubleValue());  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // power ::= power POW term 
            {
              Double RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double t = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(Math.pow(p.doubleValue() , t.doubleValue())); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("power",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // factor ::= power 
            {
              Double RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(p.doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // factor ::= factor DIVIDE power 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(f.doubleValue() / p.doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // factor ::= factor TIMES power 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double p = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(f.doubleValue() * p.doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("factor",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expr ::= factor 
            {
              Double RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(f.doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expr ::= expr MINUS factor 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(e.doubleValue() - f.doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expr ::= expr PLUS factor 
            {
              Double RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Double(e.doubleValue() + f.doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expr_part ::= VEC ID EQ vexpr NT$3 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector ve = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // NT$3 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int veleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int veright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector ve = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Variables.setVector(i, (Vector) new Vector(ve)); System.out.println(" = " + Variables.getVectorString(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$3",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expr_part ::= VEC ID NT$2 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NT$2 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Variables.setVector(i, (Vector) new Vector()); System.out.println(" = " + Variables.getVectorString(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr_part ::= DOUBLE ID EQ expr NT$1 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // NT$1 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Variables.setValue(i, (Double)(e.doubleValue())); System.out.println(" = " + Variables.getValue(i));  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr_part ::= DOUBLE ID NT$0 SEMI 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_part",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // NT$0 ::= 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 Variables.setValue(i, (Double)0.0); System.out.println(" = " + Variables.getValue(i)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expr_list EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expr_list ::= expr_list expr_part 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

